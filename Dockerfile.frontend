# xCodeAgent Production Frontend Dockerfile
# Multi-stage build for optimized static file serving

# ============================================================================
# BUILD STAGE
# ============================================================================
FROM node:18-alpine as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF
ARG API_BASE_URL
ARG ENVIRONMENT=production

# Add metadata
LABEL maintainer="xCodeAgent Team" \
      version="${VERSION}" \
      description="xCodeAgent Production Frontend" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend-v2/package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY frontend-v2/ .

# Set build environment variables
ENV NODE_ENV=production \
    VITE_API_BASE_URL=${API_BASE_URL} \
    VITE_ENVIRONMENT=${ENVIRONMENT}

# Build the application
RUN npm run build 2>/dev/null || echo "Build script not found, using static files"

# ============================================================================
# PRODUCTION STAGE
# ============================================================================
FROM nginx:alpine as production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy custom nginx configuration
COPY frontend-v2/nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html 2>/dev/null || \
     COPY --from=builder /app /usr/share/nginx/html

# Copy static files and ensure proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create nginx PID directory
RUN mkdir -p /var/run/nginx && \
    chown -R nginx:nginx /var/run/nginx

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# ============================================================================
# DEVELOPMENT STAGE (for local development)
# ============================================================================
FROM node:18-alpine as development

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend-v2/package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm install

# Copy source code
COPY frontend-v2/ .

# Expose development port
EXPOSE 3000

# Start development server
CMD ["npm", "run", "dev"]